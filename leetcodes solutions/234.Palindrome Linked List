# Solved
# Easy
# Given the head of a singly linked list, return true if it is a 
# palindrome
#  or false otherwise.

# Example 1:

# Input: head = [1,2,2,1]
# Output: true

# Example 2:

# Input: head = [1,2]
# Output: false
 
{  # Constraints:  The number of nodes in the list is in the range [1, 105]. 0 <= Node.val <= 9  }

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

class Solution {
public:
    bool isPalindrome(ListNode* head) {
        vector<int> list;
        ListNode * ptr=head;
        while(ptr!=nullptr){
            list.push_back(ptr->val);
            ptr=ptr->next;
        }
        ptr=head;
        for(int i=list.size()-1;i>=0;i--){
            if(list[i]!=ptr->val){
                return false;
            }
            ptr=ptr->next;
        }
        return true;
    }
};
