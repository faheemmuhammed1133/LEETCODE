# Given a 0-indexed integer array nums, find a 0-indexed integer array answer where:
# answer.length == nums.length.
# answer[i] = |leftSum[i] - rightSum[i]|.

# Where:
# leftSum[i] is the sum of elements to the left of the index i in the array nums. If there is no such element, leftSum[i] = 0.
# rightSum[i] is the sum of elements to the right of the index i in the array nums. If there is no such element, rightSum[i] = 0.
# Return the array answer.

# Example 1:

# Input: nums = [10,4,8,3]
# Output: [15,1,11,22]
# Explanation: The array leftSum is [0,10,14,22] and the array rightSum is [15,11,3,0].
# The array answer is [|0 - 15|,|10 - 11|,|14 - 3|,|22 - 0|] = [15,1,11,22].

# Example 2:

# Input: nums = [1]
# Output: [0]
# Explanation: The array leftSum is [0] and the array rightSum is [0].
# The array answer is [|0 - 0|] = [0].
 
# {  Constraints:  .  1 <= nums.length <= 1000  .  1 <= nums[i] <= 105  }


class Solution {
public:
    vector<int> leftRightDifference(vector<int>& nums) {
        vector<int> leftsum;
        vector<int> rightsum;
         int sum=0;
        leftsum.push_back(sum);
        for(int i=1;i<nums.size();i++){
            sum+=nums[i-1];
            leftsum.push_back(sum);
        }
        sum=0;
        rightsum.push_back(sum);
        for(int i=nums.size()-1;i>0;i--){
            sum+=nums[i];
            rightsum.push_back(sum);
        }
        vector<int> ans;
        for(int i=0;i<nums.size();i++){
            sum=leftsum[i]-rightsum[nums.size()-i-1];
            if(sum<0){
                sum*=-1;
            }
            ans.push_back(sum);
        }
        return ans;
    }
};
